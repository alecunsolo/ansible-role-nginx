---
- name: Install nginx.
  ansible.builtin.package:
    name: nginx
    state: present

- name: Main nginx configuration.
  ansible.builtin.template:
    src: '{{ nginx_main_config }}'
    dest: /etc/nginx/nginx.conf
    owner: root
    group: root
    mode: '0644'
    validate: nginx -t -c %s

- name: Enable selinux boolean
  ansible.posix.seboolean:
    name: httpd_can_network_connect
    state: true
    persistent: true
  when:
    - nginx_manage_selinux
    - ansible_selinux is defined
    - ansible_selinux
    - ansible_selinux.status == 'enabled'

# https://docs.ansible.com/ansible/latest/reference_appendices/faq.html#the-validate-option-is-not-enough-for-my-needs-what-do-i-do
- name: Add common configuration files
  ansible.builtin.include_tasks: unsafe-conf.yml
  tags: nginx_static
  loop: '{{ nginx_static_files }}'

- name: Add custom site definitions.
  ansible.builtin.include_tasks: unsafe-conf.yml
  tags: nginx_sites
  loop: '{{ nginx_configured_sites }}'

- name: Cleanup manually added sites.
  when: nginx_exclusive_sites
  block:
    - name: Find installed sites.
      ansible.builtin.find:
        paths: /etc/nginx/conf.d
        patterns: '*.conf'
      register: ng_sites

    - name: Clean up installed sites.
      ansible.builtin.file:
        path: '{{ item }}'
        state: absent
      #   msg: '{{ nginx_configured_sites | map(attribute="dest") }}'
      when: (item | replace("/etc/nginx/", "")) is not in nginx_configured_sites_dest
      loop: '{{ ng_sites["files"] | map(attribute="path") }}'

- name: Ensure nginx is up and running.
  ansible.builtin.service:
    name: nginx.service
    state: started
    enabled: yes
